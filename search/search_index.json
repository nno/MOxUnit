{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"MOxUnit testing framework","text":"<p>MOxUnit is a lightweight testing framework for Matlab and GNU Octave, that comes with optional toolboxes for coverage and testing of 'doc strings'.</p> <p>Features</p> <ul> <li>Runs on both the Matlab and GNU Octave platforms.</li> <li>Uses object-oriented TestCase, TestSuite and TestResult classes, allowing for user-defined extensions.</li> <li>Can be used directly with continuous integration services, such as GitHub, Travis-ci and Shippable.</li> <li>Supports JUnit-like XML output for use with Shippable and other test results visualization approaches.</li> <li>Supports the generation of code coverage reports using MOCov</li> <li>Provides compatibility with the (now unsupported) Steve Eddin's [Matlab xUnit test framework], and with recent Matlab test functionality.</li> <li>Distributed under the MIT license, a permissive free software license.</li> </ul> <p>Limitations</p> <p>Currently MOxUnit does not support:</p> <ul> <li>Documentation tests require MOdox.</li> <li>Support for setup and teardown functions in <code>TestCase</code> classes.</li> <li>Subclasses of MOxUnit's classes (<code>MOxUnitTestCase</code>, <code>MOxUnitTestSuite</code>, <code>MOxUnitTestReport</code>) have to be defined using \"old-style\" object-oriented syntax.</li> <li>Subtests</li> </ul>"},{"location":"acknowledgements.html","title":"Acknowledgements","text":"<ul> <li>The object-oriented class structure was inspired by the Python unit test framework.</li> <li>The <code>assert*</code> function signatures are aimed to be compatible with Steve Eddin's Matlab xUnit test framework.</li> </ul>"},{"location":"acknowledgements.html#projects-that-use-moxunit-and-mocov","title":"Projects that use MOxUnit and MOcov","text":"<ul> <li> <p>CoSMoMVPA:     A multi-modal, multi-variate pattern analysis (MVPA) toolbox in Matlab / GNU Octave for cognitive neuroscientists.</p> </li> <li> <p>bids-matlab:     MATLAB / Octave tools for BIDS datasets.</p> </li> <li> <p>bidspm:     A toolbox to perform MRI data analysis on BIDS datasets using SPM12.</p> </li> <li> <p>ONSAS: an Open Nonlinear Structural Analysis Solver.</p> </li> </ul>"},{"location":"contact.html","title":"Contact","text":"<p>Nikolaas N. Oosterhof, n dot n dot oosterhof at googlemail dot com.</p>"},{"location":"contributors.html","title":"Contributions","text":"<p>Thanks to the following contributors:</p> <ul> <li>Scott Lowe</li> <li>Thomas Feher</li> <li>Joel LeBlanc</li> <li>Anderson Bravalheri</li> <li>Sven Baars</li> <li>'jdbancal'</li> <li>Marcin Konowalczyk</li> </ul>"},{"location":"ci/github.html","title":"Github-CI","text":"<p>You can test your code with Octave or Matlab on Github.</p> <p>To use it, create a YML file in your <code>.github/workflows</code> with the content described in one of the following sections.</p> <p>Warning</p> <p>The example shown below is the one we use for own repository and may need some tweaking to work on yours.</p>"},{"location":"ci/github.html#octave","title":"Octave","text":""},{"location":"ci/github.html#using-the-moxunit-github-action","title":"Using the moxunit Github action","text":"<p>There is a \"preset\" github action will test your code with Ubuntu and Octave.</p> <pre><code>---\nname: CI octave action\n\n# Controls when the action will run. Triggers the workflow on push or pull request\n# events but only for the master branch\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: [master]\n    workflow_dispatch:\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"unit-tests\"\n    unit-tests:\n    # The type of runner that the job will run on\n        runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n        steps:\n    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n        -   uses: actions/checkout@v4\n\n    # Use A Github Action to perform tests\n        -   name: run unit tests and documentation tests, generate coverage report\n            uses: joergbrech/moxunit-action@v1.1\n            with:\n                tests: tests\n                src: MOxUnit\n                with_coverage: true\n                doc_tests: true\n                cover_xml_file: coverage.xml\n\n    # Store the coverage report as an artifact\n        -   name: Store Coverage report as artifact\n            uses: actions/upload-artifact@v4\n            with:\n                name: coverage_xml_file\n                path: coverage.xml\n</code></pre>"},{"location":"ci/github.html#manual-set-up","title":"'Manual' set up","text":"<p>If you do not use the github action, you have to install octave and all the relevant toolboxes.</p> <pre><code>---\nname: CI octave\n\n# - Installs\n#   - octave\n#   - MOcov\n# - checks out MOXunit\n# - Runs tests\n# - If tests pass, uploads coverage to codecov\n\n# Controls when the action will run.\n# Triggers the workflow:\n#   - on push for the master branch\n#   - on pull request for all branches\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: ['*']\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\nenv:\n    OCTFLAGS: --no-gui --no-window-system --silent\n\njobs:\n    tests:\n        runs-on: ubuntu-latest\n        steps:\n        -   name: Checkout repository\n            uses: actions/checkout@v4\n        -   name: Install MOcov\n            run: |\n                git clone https://github.com/MOcov/MOcov.git --depth 1\n        -   name: Install Octave\n            run: |\n                sudo apt-get -y -qq update\n                sudo apt-get -y install \\\n                  octave\n                make install\n                make -C MOcov install\n        -   name: Octave version\n            run: octave --version\n        -   name: Run tests\n            run: octave $OCTFLAGS --eval \"moxunit_runtests tests -verbose -with_coverage -cover MOxUnit -cover_xml_file coverage.xml; exit(double(~ans))\"\n\n        # uncomment the lines below to upload coverage to codecov\n        -   name: Code coverage\n            uses: codecov/codecov-action@v5\n            with:\n                file: coverage.xml\n                flags: octave\n                name: codecov-octave\n                fail_ci_if_error: false\n                # token: ${{ secrets.CODECOV_TOKEN }}\n</code></pre>"},{"location":"ci/github.html#matlab","title":"Matlab","text":"<p>You can test your code with Matlab with several operating systems and Matlab versions.</p> <pre><code>---\nname: CI matlab\n\n# - Installs\n#   - MATLAB github action\n#   - MOcov\n# - checks out MOXunit\n# - Runs tests\n# - If tests pass, uploads coverage to codecov\n\n# Controls when the action will run.\n# Triggers the workflow:\n#   - on push for the master branch\n#   - on pull request for all branches\non:\n    push:\n        branches: [master]\n    pull_request:\n        branches: ['*']\n\n# cancel previous runs on the same branch / PR\nconcurrency:\n    group: ${{ github.workflow }}-${{ github.ref }}\n    cancel-in-progress: true\n\njobs:\n    tests:\n        strategy:\n            matrix:\n        # Note that some older versions (e.g R2020a, R2020b...) may not be available on all OS\n                matlab_version: [R2022a, R2022b, R2023a, R2023b]\n                os: [ubuntu-latest, macos-latest, windows-latest]\n            fail-fast: false # Don't cancel all jobs if one fails\n        runs-on: ${{ matrix.os }}\n        steps:\n    # use matlab-actions/setup-matlab to setup a specific version of MATLAB\n    # https://github.com/matlab-actions/setup-matlab\n        -   name: Install MATLAB\n            uses: matlab-actions/setup-matlab@v2\n            with:\n                release: ${{ matrix.matlab_version }}\n        -   name: Checkout repository\n            uses: actions/checkout@v4\n        -   name: Install MOcov\n            run: |\n                git clone https://github.com/MOcov/MOcov.git --depth 1\n    # use matlab-actions/setup-matlab to run a matlab command\n    # https://github.com/matlab-actions/setup-matlab\n        -   name: Run tests\n            uses: matlab-actions/run-command@v2\n      # This command will call the script run_tests_gh_ci.m that will:\n      # - set up moxunit\n      # - add MOcov to the path\n      # - run the tests\n      # - exit with the result\n            with:\n                command: run run_tests_gh_ci;\n\n        # uncomment the lines below to upload coverage to codecov\n        -   name: Code coverage\n            uses: codecov/codecov-action@v5\n            with:\n                file: coverage.xml\n                flags: ${{ matrix.os }}_matlab-${{ matrix.matlab_version }}\n                name: codecov-octave\n                fail_ci_if_error: false\n                # token: ${{ secrets.CODECOV_TOKEN }}\n</code></pre> <p>Note that this wokflow calls the following script:</p> <pre><code>\n</code></pre> <p>Warning</p> <p>You may need to use a slightly different run_test.m by updating the values for <code>path/to/src</code> and <code>path/to/tests</code> to make sure it points to where your source code and tests are.</p> <pre><code>cd('./MOxUnit/MOxUnit/');\nmoxunit_set_path();\ncd ../..;\n\naddpath(fullfile(pwd, 'MOcov', 'MOcov'));\n\nmoxunit_runtests path/to/tests -verbose -with_coverage -cover path/to/src -cover_xml_file coverage.xml;\n\nexit(double(~ans))\n</code></pre>"},{"location":"ci/travis.html","title":"Travis-CI","text":"<p>MOxUnit can be used with the Travis-ci service for continuous integration (CI) testing. This is achieved by setting up a .travis.yml configuration file. This file is also used by Shippable. As a result, the test suite is run automatically on both Travis-ci and Shippable every time it is pushed to the github repository, or when a pull request is made. If a test fails, or if all tests pass after a test failed before, the developers are notified by email.</p>"},{"location":"ci/travis.html#octave","title":"Octave","text":"<p>The easiest test to set up on Travis and/or Shippable is with GNU Octave. Make sure your code is Octave compatible. Note that many Matlab projects tend to use functionality not present in Octave (such as particular functions), whereasand writing code that is both Matlab- and Octave-compatible may require some additional efforts.</p> <p>A simple <code>.travis.yml</code> file for a project could look like that:</p> <pre><code>language: generic\nos: linux\n\nbefore_install:\n  - sudo apt-get install octave\n\nbefore_script:\n  - git clone https://github.com/MOxUnit/MOxUnit.git\n  - make -C MOxUnit install\n\nscript:\n  - make test\n</code></pre> <p>In this case <code>make test</code> is used to run the tests. To avoid a Makefile and run tests directly through Octave, the script has to call Octave directly to run the tests:</p> <pre><code># ...\nbefore_script:\n- git clone https://github.com/MOxUnit/MOxUnit.git\n\nscript:\n  - octave --no-gui --eval \"addpath('~/git/MOxUnit/MOxUnit');moxunit_set_path;moxunit_runtests('tests')\"\n</code></pre> <p>Note that MOxUnit tests itself on travis, with this travis file.</p>"},{"location":"ci/travis.html#matlab","title":"Matlab","text":"<p>Travis supports Matlab directly. You can use MOxUnit with it, but its tricky because:</p> <ol> <li> <p>Travis only supports Matlab 2020a and, presumably, higher (at the time of writing 2020a is the newest version).</p> </li> <li> <p>Makefile installation does not work with Matlab on travis.</p> </li> <li> <p>Nor does calling Matlab from the command line in a usual way - with <code>matlab -nodesktop -nosplash ...</code> . Instead it has to be called with the <code>-batch</code> flag.</p> <p>Therefore, <code>.travis.yml</code> file looks as follows:</p> <pre><code>language: matlab\nmatlab: R2020a\nos: linux\n\n# Just clone MOxUnit, `don't make install` it (!)\nbefore_script:\n  - git clone https://github.com/MOxUnit/MOxUnit.git\n\nscript:\n  - matlab -batch 'back=cd(\"./MOxUnit/MOxUnit/\"); moxunit_set_path(); cd(back); moxunit_runtests tests -verbose; exit(double(~ans))'\n</code></pre> <p><code>exit(double(~ans))</code> ensures that the build fails if MOxUnit tests fail.</p> </li> </ol>"},{"location":"mocov/index.html","title":"Mocov","text":""},{"location":"mocov/index.html#coming-soon","title":"coming soon","text":""},{"location":"modox/index.html","title":"Modox","text":""},{"location":"modox/index.html#coming-soon","title":"coming soon","text":""},{"location":"moxunit/installation.html","title":"Installation","text":""},{"location":"moxunit/installation.html#using-the-shell","title":"Using the shell","text":"<p>This requires a Unix-like operating system such as GNU/Linux or Apple OSX.</p> <pre><code>git clone https://github.com/MOxUnit/MOxUnit.git\ncd MOxUnit\nmake install\n</code></pre> <p>This will add the MOxUnit directory to the Matlab and/or GNU Octave searchpath. If both Matlab and GNU Octave are available on your machine, it will install MOxUnit for both.</p>"},{"location":"moxunit/installation.html#manual-installation","title":"Manual installation","text":"<ul> <li> <p>Download the [MOxUnit zip archive] from the [MOxUnit] website, and extract it. This should     result in a directory called <code>MOxUnit-master</code>.</p> </li> <li> <p>Start Matlab or GNU Octave.</p> </li> <li> <p>On the Matlab or GNU Octave prompt, go to the directory that contains the new <code>MOxUnit-master</code> directory, then run:</p> <pre><code>% change to the MOxUnit subdirectory\n%\n% Note: if MOxUnit was retrieved using 'git', then the name of\n%       top-level directory is 'MOxUnit', not 'MOxUnit-master'\ncd MOxUnit-master/MOxUnit\n\n% add the current directory to the Matlab/GNU Octave path\nmoxunit_set_path()\n\n% save the path\nsavepath\n</code></pre> </li> </ul>"},{"location":"moxunit/usage.html","title":"Using MOxUnit","text":""},{"location":"moxunit/usage.html#defining-moxunit-tests","title":"Defining MOxUnit tests","text":"<p>To define unit tests, write a function with the following header:</p> <pre><code>function test_suite=test_of_abs\n    try % assignment of 'localfunctions' is necessary in Matlab &gt;= 2016\n        test_functions=localfunctions();\n    catch % no problem; early Matlab versions can use initTestSuite fine\n    end\n    initTestSuite;\n</code></pre>"},{"location":"moxunit/usage.html#important","title":"Important","text":"<ul> <li>It is crucial that the output of the main function is a variable named <code>test_suite</code>, and that the output of <code>localfunctions</code> is assigned to a variable named <code>test_functions</code>.</li> <li>As of Matlab 2016b, Matlab scripts (such as <code>initTestSuite.m</code>) do not have access to subfunctions in a function if called from that function. Therefore it requires using localfunctions to obtain function handles to local functions. The \"try-catch-end\" statements are necessary for compatibility with older versions of GNU Octave, which do not provide the <code>localfunctions</code> function.</li> <li>Alas, the call to <code>localfunctions</code> cannot be incorporated into <code>initTestSuite</code> so the entire code snippet above has to be the header of each test file</li> </ul> <p>Then, define subfunctions whose name start with <code>test</code> or end with <code>test</code> (case-insensitive). These functions can use the following <code>assert*</code> functions:</p> <ul> <li><code>assertTrue(a)</code>: assert that <code>a</code> is true.</li> <li><code>assertFalse(a)</code>: assert that <code>a</code> is false.</li> <li><code>assertEqual(a,b)</code>: assert that <code>a</code> and <code>b</code> are equal.</li> <li><code>assertElementsAlmostEqual(a,b)</code>: assert that the floating point arrays <code>a</code> and <code>b</code> have the same size, and that corresponding elements are equal within some numeric tolerance.</li> <li><code>assertVectorsAlmostEqual(a,b)</code>: assert that floating point vectors <code>a</code> and <code>b</code> have the same size, and are equal within some numeric tolerance based on their vector norm.</li> <li><code>assertExceptionThrown(f,id)</code>: assert that calling <code>f()</code> throws an exception with identifier <code>id</code>. (To deal with cases where Matlab and GNU Octave throw errors with different identifiers, use <code>moxunit_util_platform_is_octave</code>. Or use <code>id='*'</code> to match any identifier).</li> </ul> <p>As a special case, <code>moxunit_throw_test_skipped_exception('reason')</code> throws an exception that is caught when running the test; <code>moxunit_run_tests</code> will report that the test is skipped for reason <code>reason</code>.</p> <p>For example, the following function defines three unit tests that tests some possible inputs from the builtin <code>abs</code> function:</p> <pre><code>function test_suite=test_of_abs\n    try % assignment of 'localfunctions' is necessary in Matlab &gt;= 2016\n        test_functions=localfunctions();\n    catch % no problem; early Matlab versions can use initTestSuite fine\n    end\n    initTestSuite;\n\nfunction test_abs_scalar\n    assertTrue(abs(-1)==1)\n    assertEqual(abs(-NaN),NaN);\n    assertEqual(abs(-Inf),Inf);\n    assertEqual(abs(0),0)\n    assertElementsAlmostEqual(abs(-1e-13),0)\n\nfunction test_abs_vector\n    assertEqual(abs([-1 1 -3]),[1 1 3]);\n\nfunction test_abs_exceptions\n    % GNU Octave and Matlab use different error identifiers\n    if moxunit_util_platform_is_octave()\n        assertExceptionThrown(@()abs(struct),'');\n    else\n        assertExceptionThrown(@()abs(struct),...\n                             'MATLAB:UndefinedFunction');\n    end\n</code></pre> <p>Examples of unit tests are in MOxUnit's <code>tests</code> directory, which test some of MOxUnit's functions itself.</p>"},{"location":"moxunit/usage.html#running-moxunit-tests","title":"Running MOxUnit tests","text":"<ul> <li> <p><code>cd</code> to the directory where the unit tests reside. For MOxUnit itself, the unit tests are in the directory <code>tests</code>.</p> </li> <li> <p>run the tests using <code>moxunit_runtests</code>. For example, running <code>moxunit_runtests</code> from MOxUnit's <code>tests</code> directory runs tests for MOxUnit itself, and should give the following output:</p> <pre><code>&gt;&gt; moxunit_runtests\nsuite: 98 tests\n............................................................\n......................................\n--------------------------------------------------\n\n  OK (passed=98)\n  ans =\n    logical\n    1\n</code></pre> </li> <li> <p><code>moxunit_runtests</code>, by default, gives non-verbose output and runs all tests in the current directory. This can be changed using the following arguments:</p> <ul> <li><code>-verbose</code>: show verbose output.</li> <li><code>-quiet</code>: suppress all output</li> <li><code>directory</code>: run unit tests in directory <code>directory</code>.</li> <li><code>file.m</code>: run unit tests in file <code>file.m</code>.</li> <li><code>-recursive</code>: add files from directories recursively.</li> <li><code>-logfile logfile.txt</code>: store the output in file <code>logfile.txt</code>.</li> <li><code>-junit_xml_file xmlfile</code>: store JUnit-like XML output in file <code>xmlfile</code>.</li> </ul> </li> <li> <p>To test MOxUnit itself from a terminal, run:</p> <pre><code>make test\n</code></pre> </li> </ul>"},{"location":"moxunit/usage.html#compatibility-notes","title":"Compatibility notes","text":"<ul> <li> <p>Because GNU Octave 3.8 does not support <code>classdef</code> syntax, 'old-style' object-oriented syntax is used for the class definitions. For similar reasons, MOxUnit uses the <code>lasterror</code> function, even though its use in Matlab is discouraged.</p> </li> <li> <p>Recent versions of Matlab (2016 and later) do not support tests defined just using \"initTestSuite\", that is without the use of <code>localfunctions</code> (see above). To ease the transition, consider using the Python script <code>tools/fix_mfile_test_init.py</code>, which can update existing .m files that do not use <code>localfunctions</code>.</p> <p>For example, the following command was used on a Unix-like shell to preview changes to MOxUnit's tests:</p> <pre><code>  find tests -iname 'test*.m' | xargs -L1 tools/fix_mfile_test_init.py\n</code></pre> <p>and adding the <code>--apply</code> option applies these changes, meaning that found files are rewritten:</p> <pre><code>  find tests -iname 'test*.m' | xargs -L1 tools/fix_mfile_test_init.py --apply\n</code></pre> </li> <li> <p>Recent versions of Matlab define a <code>matlab.unittest.Test</code> class for unit tests. An instance <code>t</code> can be used with MOxUnit using the <code>MOxUnitMatlabUnitWrapperTestCase(t)</code>, which is a <code>MOxUnitTestCase</code> instance. Tests that are defined through</p> <pre><code>function tests=foo()\n   tests=functiontests(localfunctions)\n\nfunction test_funcA(param)\n\nfunction test_funcA(param)\n</code></pre> <p>can be run using MOxUnit as well (and included in an <code>MOxUnitTestSuite</code> instance using its with <code>addFile</code>) instance, with the exception that currently setup and teardown functions are currently ignored.</p> </li> </ul>"}]}